#!/bin/bash

# set -x
set -e

export CLANG=clang++-3.8

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export COCL_HOME=$(dirname ${SCRIPT_DIR})

# Using this weird bash, compared to other possibilities because:
# - getopts cant handle long options
# - would rather not make cocl dependent on python (although I know that tensorflow already is)
# - getopt non-gnu cant handle long options either
# - getopt gnu is not the default on Mac
# I *hope* that bash is fairly portable, across Linux, Mac, cygwin/msys64?

# echo args "$@"
PASSTHRU=
while [[ x$1 != x ]]; do {
    # echo 1 $1
    arr1=(${1//=/ })
    THISARG=${arr1[0]}
    DONE=0
    TWOLETTERS=${1:0:2}
    # echo TWOLETTERS [$TWOLETTERS]
    case "${TWOLETTERS}" in
        -I)
            # echo got include
            # need to check if theres a space or not
            if [[ $1 == -I ]]; then {
                INCLUDES="$INCLUDES -I$2"
                shift
            } else {
                INCLUDES="$INCLUDES $1"
            } fi
            DONE=1
            ;;
        -D)
            # PASSTHRU="$PASSTHRU $1"
            DONE=1
            ;;
        -O)
            # ignore...
            DONE=1
            ;;
        -G)
            # PASSTHRU="$PASSTHRU $1"
            # ignore
            DONE=1
            ;;
        -U)
            # PASSTHRU="$PASSTHRU $1"
            DONE=1
            ;;
        -x)
            # not sure why we are receiving -x cu? ignore for now
            shift
            DONE=1
            ;;
         *)
            ;;
    esac
    if [[ $DONE != 1 ]]; then {
        # echo THISARG ${THISARG}
        case ${THISARG} in
            -M)
                # not sure what this is, but it suppresses device IR generation...
                # => ignore
                # PASSTHRU="$PASSTHRU -M"
                ;;
            # -I)
            #    INCLUDES="$INCLUDES $1"
            #     ;;
            -c)
                COMPILE=1
                ;;
            -g)
                OPT_G=-g
                ;;
            -o)
                OUTPATH=$2
                shift
                ;;
            -iquote)
                # PASSTHRU="$PASSTHRU $1 $2"
                shift
                ;;
            -isystem)
                # PASSTHRU="$PASSTHRU $1 $2"
                shift
                ;;
            -gencode)
                # echo ignoring -gencode
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            --compiler-bindir)
                # echo ignoring --compiler-bindir
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            -fPIC)
                PASSTHRU="$PASSTHRU $1"
                ;;
            -fno-canonical-system-headers)
                # echo ignoring -fno-canonical-system-headers
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            --compiler-options)
                # echo ignoring --compiler-options
                shift
                # echo ignoring compiler-options
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            -std)
                # echo got -std
                # PASSTHRU="$PASSTHRU $1"
                ;;
            *)
                # echo adding $1 as input file
                if [[ x$INFILES != x ]]; then {
                    INFILES="$INFILES $1"
                } else {
                    INFILES="$1"
                } fi
                ;;
        esac
    } fi
    # esac
    # echo new passthru $PASSTHRU
    # echo doing shift
    shift
} done

# echo OUTPATH [$OUTPATH]
# echo INFILES ["$INFILES"]
# echo PASSTHRU $PASSTHRU
INPATH=${INFILES}

# echo INCLUDES ${INCLUDES}
# echo INPATH ${INPATH}
# echo OUTPATH ${OUTPATH}
# echo COMPILE ${COMPILE}
export INCLUDES

if [[ x$INPATH == x ]]; then {
    echo Usage: $0 [-c] [-g] [[-Iincludepath]...] [-o outfile] [infile.cu]
    exit 1
} fi

# since tf feeds us weird postfixes like '.cu.cc' ,and '.cu.pic.d' (is that a foldername? unclear for now...), so
# we need to do something more robust than just assume the files end in '.cu' or '.o'
# so, we'll do a bash string split

# gets a file basename and postfix, for unknown postfix
# output: BASEPATH POSTFIX
# eg input: foo/bar/somefile.cu.cc
# outputs will be:
# BASEPATH=foo/bar/somefile
# POSTFIX=.cu.cc
function split_path {
    DIRNAME=$(dirname $1)

    BASENAME=$(basename $1)

    BASEARR=(${BASENAME//./ })
    BASEPATH=${DIRNAME}/${BASEARR[0]}

    LENARR=$((${#BASEARR[@]} - 1))
    ARGREST=
    for j in $(seq 1 ${LENARR}); do {
        ARGREST="$ARGREST.${BASEARR[$j]}";
    } done
    POSTFIX=$ARGREST
}

split_path ${INPATH}
INPUTBASEPATH=${BASEPATH}
INPUTPOSTFIX=${POSTFIX}

# # INPUTBASENAME=$(basename -s .cc ${INPATH})
# INPUTBASENAME=$(basename -s .cu ${INPATH})
# INPUTDIRNAME=$(dirname ${INPATH})
# INPUTBASEPATH=${INPUTDIRNAME}/${INPUTBASENAME}

if [[ -v OUTPATH ]]; then {
    OUTFILE=${OUTPATH}
} else {
    if [[ $COMPILE == 1 ]]; then {
        OUTFILE=${INPUTBASEPATH}.o
    } else {
        OUTFILE=${INPUTBASEPATH}
    } fi
} fi

split_path ${OUTFILE}
OUTPUTBASEPATH=${BASEPATH}
OUTPUTPOSTFIX=${POSTFIX}


# OUTPUTBASENAME=$(basename -s .o ${OUTFILE})
# OUTPUTDIRNAME=$(dirname ${OUTFILE})
# OUTPUTBASEPATH=${OUTPUTDIRNAME}/${OUTPUTBASENAME}

# exit 1

if [[ x${NOCOCLREBUILD} == x ]]; then {
    (cd ${COCL_HOME}
         # make
    )
} fi

if [[ ! -v COMPILE ]]; then {
    FINALPOSTFIX=${OUTPUTPOSTFIX}
    OUTPUTPOSTFIX=.o
} fi

# PASSTHRU="${PASSTHRU}" OUTPUTBASEPATH=${OUTPUTBASEPATH} OUTPUTPOSTFIX=${OUTPUTPOSTFIX} INPUTPOSTFIX=${INPUTPOSTFIX} INPUTBASEPATH=${INPUTBASEPATH} OPT_G=${OPT_G} make -f ${COCL_HOME}/src/cocl.Makefile
# echo ${SCRIPT_DIR}/../share/cocl/cocl.Makefile
# echo PASSTHRU ${PASSTHRU}
OUTPUTBASEPATH=${OUTPUTBASEPATH} OUTPUTPOSTFIX=${OUTPUTPOSTFIX} PASSTHRU=${PASSTHRU} INPUTPOSTFIX=${INPUTPOSTFIX} INPUTBASEPATH=${INPUTBASEPATH} OPT_G=${OPT_G} make -f ${SCRIPT_DIR}/../share/cocl/cocl.Makefile

# if [[ -v COMPILE ]]; then {
#     set +x
#     echo ""
#     echo "    ${INPUTBASEPATH}${INPUTPOSTFIX} compiled into ${OUTPUTBASEPATH}${OUTPUTPOSTFIX}"
#     echo ""
# } else {
#     g++ -o ${OUTPUTBASEPATH}${FINALPOSTFIX} ${OUTPUTBASEPATH}${OUTPUTPOSTFIX} -L${COCL_HOME}/build -lcocl -lOpenCL
#     set +x
#     echo ""
#     echo "    ${INPUTBASEPATH}${INPUTPOSTFIX} compiled into ${OUTPUTBASEPATH}${FINALPOSTFIX}"
#     echo ""
# } fi
