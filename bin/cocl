#!/bin/bash

if [ ! -z "$SETX" ]; then {
   set -x
} fi

echo cocl args: $@

set -e

# environment variables for controlling parse and compile optimizations:

# export DEVICE_PARSE_OPT_LEVEL=0
# export DEVICE_PARSE_PASSES="inline,mem2reg,instcombine"

# export HOSTSIDE_PARSE_OPT_LEVEL=0
# export HOSTSIDE_COMPILE_OPT_LEVEL=3

# device-side, we only use clang for parsing. After parsing to bytecode,
# no further optimization steps are run. Note that running high values of
# optimization on devide-side parsing will generate insanely complex
# opencl, which is probably slowtastic

# hostside, optimization pretty much works as normal, I think. The only
# nuance is, hostside interface and deviceside interface should ideally match,
# which wont be the case if their optimizaiton levels differ

if [ -z ${DEVICE_PARSE_OPT_LEVEL} ]; then {
    export DEVICE_PARSE_OPT_LEVEL=0
} fi
if [ -z ${DEVICE_PARSE_PASSES} ]; then {
    export DEVICE_PARSE_PASSES=inline,mem2reg,instcombine
} fi
if [ -z ${HOSTSIDE_PARSE_OPT_LEVEL} ]; then {
    export HOSTSIDE_PARSE_OPT_LEVEL=0
} fi
if [ -z ${HOSTSIDE_COMPILE_OPT_LEVEL} ]; then {
    export HOSTSIDE_COMPILE_OPT_LEVEL=3
} fi

DEVICE_PARSE_PASSES_STR=
if [ ! -z ${DEVICE_PARSE_PASSES} ]; then {
    export DEVICE_PARSE_PASSES_STR=$(echo "-${DEVICE_PARSE_PASSES}" | sed -e 's/,/ -/g')
} fi
echo "DEVICE_PARSE_PASSES_STR=${DEVICE_PARSE_PASSES_STR}"

export ADDFLAGS=
export NATIVE_COMPILER=g++
export SO_SUFFIX=.so
case `uname` in
    Darwin)
        ADDFLAGS="-stdlib=libc++"
        export NATIVE_COMPILER=clang++
        export SO_SUFFIX=.dylib
        ;;
    *)
        ;;
esac

SCRIPT_DIR=$( cd "$( dirname "$0" )" && pwd )
export COCL_HOME=$(dirname ${SCRIPT_DIR})

if [[ x${COCL_BIN} == x ]]; then {
    if [ -f ${COCL_HOME}/bin/patch_hostside ]; then {
        export COCL_BIN=${COCL_HOME}/bin
        export COCL_LIB=${COCL_HOME}/lib
    } else {
        export COCL_BIN=${PWD}
        export COCL_LIB=${PWD}
    } fi
} fi

# Using this weird bash, compared to other possibilities because:
# - getopts cant handle long options
# - would rather not make cocl dependent on python (although I know that tensorflow already is)
# - getopt non-gnu cant handle long options either
# - getopt gnu is not the default on Mac
# I *hope* that bash is fairly portable, across Linux, Mac, cygwin/msys64?

display_help () {
    cat <<EOF

    Usage: cocl [options] <targetfile>
      -c compile to .o only, dont link
      -o final output filepath
      --clang-home Path to llvm4.0

      Options passed through to clang compiler:
        -fPIC
        -I<INCLUDEDIR>
        -D<SYMBOL>[=<VALUE>]
        -g

      Options ignored currently:
        -O
        -G
        -U
        -M
        -x <something>
        -iquote <something>
        -isystem <something>
        -compiler-options <something>
        -fno-canonical-system-headers
        -std<something>
        -compiler-bindir
        -gencode

EOF
}

PASSTHRU=
export IROOPENCLARGS=
# export DEVICELLOPT=
while [ "x$1" != x ]; do {
    THISARG=$(echo $1 | cut -d = -f 1)
    DONE=0
    TWOLETTERS=$(echo $1 | cut -c 1-2)
    case "${TWOLETTERS}" in
        \;)
           # ignore (artifact of cmake file hacking...
           DONE=1
           ;;
        -I)
            # echo got include
            # need to check if theres a space or not
            if [ $1 = -I ]; then {
                INCLUDES="$INCLUDES -I$2"
                shift
            } else {
                THESEINCLUDES=$(echo $1 | sed -e 's/;/ /g')
                for THISINCLUDE in ${THESEINCLUDES}; do {
                    INCLUDES="${INCLUDES} ${THISINCLUDE}"
                } done
            } fi
            DONE=1
            ;;
        -D)
            # hacktastic :-D. Would be better to fix the cmake rules, sooner or later...
            DSTRIPPED=$(echo $1 | sed -e 's/-D-D/-D/')
            PASSTHRU="$PASSTHRU $DSTRIPPED"
            DONE=1
            ;;
        -O)
            # ignore...
            DONE=1
            ;;
        -G)
            # PASSTHRU="$PASSTHRU $1"
            # ignore
            DONE=1
            ;;
        -U)
            # PASSTHRU="$PASSTHRU $1"
            DONE=1
            ;;
        -x)
            # not sure why we are receiving -x cu? ignore for now
            shift
            DONE=1
            ;;
         *)
            ;;
    esac
    if [ $DONE != 1 ]; then {
        # echo THISARG ${THISARG}
        case ${THISARG} in
            -M)
                # not sure what this is, but it suppresses device IR generation...
                # => ignore
                # PASSTHRU="$PASSTHRU -M"
                ;;
            # -I)
            #    INCLUDES="$INCLUDES $1"
            #     ;;
            -c)
                COMPILE=1
                ;;
            -g)
                OPT_G=-g
                # ignore, so we dont get llvm stuff everywehere...
                ;;
            -o)
                OUTPATH=$2
                shift
                ;;
            -iquote)
                # PASSTHRU="$PASSTHRU $1 $2"
                shift
                ;;
            --clang-home)
                CLANG_HOME=$2
                shift
                ;;
            -isystem)
                # PASSTHRU="$PASSTHRU $1 $2"
                shift
                ;;
            -?)
                display_help
                exit 0
                ;;
            -h)
                display_help
                exit 0
                ;;
            --help)
                display_help
                exit 0
                ;;
            -gencode)
                # echo ignoring -gencode
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            --compiler-bindir)
                # echo ignoring --compiler-bindir
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            -ferror-limit)
                PASSTHRU="$PASSTHRU $1"
                ;;
            -fPIC)
                PASSTHRU="$PASSTHRU $1"
                ;;
            -fno-canonical-system-headers)
                # echo ignoring -fno-canonical-system-headers
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            --compiler-options)
                # echo ignoring --compiler-options
                shift
                # echo ignoring compiler-options
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            -std)
                # echo got -std
                # PASSTHRU="$PASSTHRU $1"
                ;;
            *)
                # echo adding $1 as input file
                if [ x$INFILES != x ]; then {
                    INFILES="$INFILES $1"
                } else {
                    INFILES="$1"
                } fi
                ;;
        esac
    } fi
    # esac
    # echo new passthru $PASSTHRU
    # echo doing shift
    shift
} done

if [ x$CLANG_HOME = x ]; then {
    echo
    echo Please set CLANG_HOME, eg on Ubuntu you might do:
    echo 
    echo     export CLANG_HOME=/usr/local/opt/llvm-4.0
    echo
    exit 1
} fi
export CLANG=clang++

INPATH=${INFILES}

export INCLUDES

if [ "x$INPATH" = "x" ]; then {
    echo Usage: $0 [-c] [-g] [[-Iincludepath]...] [-o outfile] [infile.cu]
    exit 1
} fi

# since tf feeds us weird postfixes like '.cu.cc' ,and '.cu.pic.d' (is that a foldername? unclear for now...), so
# we need to do something more robust than just assume the files end in '.cu' or '.o'
# so, we'll do a bash string split

# gets a file basename and postfix, for unknown postfix
# output: BASEPATH POSTFIX
# eg input: foo/bar/somefile.cu.cc
# outputs will be:
# BASEPATH=foo/bar/somefile
# POSTFIX=.cu.cc
split_path () {
    DIRNAME=$(dirname $1)
    BASENAME=$(basename $1)

    BASEARR0=$(echo $BASENAME | cut -d . -f 1)
    BASEPATH=${DIRNAME}/${BASEARR0}

    ARGREST=$(echo $BASENAME | cut -s -d . -f 2-)
    if [ x$ARGREST != x ]; then {
        ARGREST=.${ARGREST}
    } fi
    POSTFIX=$ARGREST
}

split_path ${INPATH}
INPUTBASEPATH=${BASEPATH}
INPUTPOSTFIX=${POSTFIX}

if [ $OUTPATH ]; then {
    OUTFILE=${OUTPATH}
} else {
    if [ x$COMPILE = x1 ]; then {
        OUTFILE=${INPUTBASEPATH}.o
    } else {
        OUTFILE=${INPUTBASEPATH}
    } fi
} fi

split_path ${OUTFILE}
OUTPUTBASEPATH=${BASEPATH}
OUTPUTPOSTFIX=${POSTFIX}

if [ x${NOCOCLREBUILD} = x ]; then {
    (cd ${COCL_HOME}
         # make
    )
} fi

if [ ! "$COMPILE" ]; then {
    FINALPOSTFIX=${OUTPUTPOSTFIX}
    OUTPUTPOSTFIX=.o
} fi


LLVM_COMPILE_FLAGS=`${CLANG_HOME}/bin/llvm-config --cppflags --cxxflags | sed -e 's/ -fno-exceptions/ -fexceptions/g' -e 's/ -fno-rtti//g' -e 's/ -DNDEBUG//g' -e 's/ -g / /g' -e 's/ -std=c++0x/ -std=c++11/g' -e 's% -isysroot [^ ]*%%g'`
LLVM_COMPILE_FLAGS=${LLVM_COMPILE_FLAGS//-Wno-maybe-uninitialized/}

# we're going to use LLVM_LL_COMPILE_FLAGS for linking
# technically, we should be using LLVM_LINK_FLAGS for that, but that seems to
# not have the libraries we need, though that might be fixable (and thus clearn)
LLVM_LL_COMPILE_FLAGS=$(echo " ${LLVM_COMPILE_FLAGS} " | sed -e 's/-I *[^ ]*/ /g')
LLVM_LINK_FLAGS=`${CLANG_HOME}/bin/llvm-config --ldflags --system-libs --libs all`

OUTDIR=$(dirname ${OUTFILE})
if [[ ! -d ${OUTDIR} ]]; then {
    echo making output folder ${OUTDIR}
    (
        set -x
        mkdir -p ${OUTDIR}
    )
} fi

# note to self: hmmmm, should we be defining in addition __CUDA_ARCH__ here?
(
    set -x
    ${CLANG_HOME}/bin/clang++ ${PASSTHRU} -DUSE_CLEW \
        -std=c++11 -x cuda \
        -D__CORIANDERCC__ \
        -D__CUDACC__ \
        --cuda-gpu-arch=sm_30 -nocudalib -nocudainc --cuda-device-only -emit-llvm \
        -O${DEVICE_PARSE_OPT_LEVEL} \
        -S \
        ${ADDFLAGS} \
        -Wno-gnu-anonymous-struct \
        -Wno-nested-anon-types \
        ${LLVM_COMPILE_FLAGS} \
        -I${COCL_HOME}/include/EasyCL \
        -I${COCL_HOME}/include/cocl \
        -I${COCL_HOME}/src \
        -I${COCL_HOME}/src/EasyCL \
        -I${COCL_HOME}/src/EasyCL/thirdparty/clew/include \
        -include ${COCL_HOME}/include/cocl/cocl.h \
        -include ${COCL_HOME}/include/cocl/fake_funcs.h \
        -include ${COCL_HOME}/include/cocl/cocl_deviceside.h \
        -I${COCL_HOME}/include \
        ${INCLUDES} \
        ${INPUTBASEPATH}${INPUTPOSTFIX} -o ${OUTPUTBASEPATH}-device-noopt.ll
)

(
    set -x
    ${CLANG_HOME}/bin/opt ${DEVICE_PARSE_PASSES_STR} -S \
        -o ${OUTPUTBASEPATH}-device.ll \
        ${OUTPUTBASEPATH}-device-noopt.ll
)

(
    set -x
    ${CLANG_HOME}/bin/clang++ ${PASSTHRU} \
        ${INCLUDES} -DUSE_CLEW \
        -std=c++11 -x cuda -nocudainc --cuda-host-only -emit-llvm \
        -O${HOSTSIDE_PARSE_OPT_LEVEL} \
        -S \
        ${OPT_G} \
        -D__CUDACC__ \
        -D__CORIANDERCC__ \
        -Wno-gnu-anonymous-struct \
        -Wno-nested-anon-types \
        ${LLVM_COMPILE_FLAGS} \
        -I${COCL_HOME}/include \
        -I${COCL_HOME}/include/EasyCL \
        -I${COCL_HOME}/include/cocl \
        -I${COCL_HOME}/src \
        -I${COCL_HOME}/src/EasyCL/thirdparty/clew/include \
        -I${COCL_HOME}/src/EasyCL \
        ${ADDFLAGS} \
        ${LLVM_COMPILE_FLAGS} \
        -include ${COCL_HOME}/include/cocl/cocl.h \
        -include ${COCL_HOME}/include/cocl/fake_funcs.h \
        -include ${COCL_HOME}/include/cocl/cocl_hostside.h \
        ${INPUTBASEPATH}${INPUTPOSTFIX} \
        -o ${OUTPUTBASEPATH}-hostraw.ll
)

(
    set -x
    ${COCL_BIN}/patch_hostside \
        --hostrawfile ${OUTPUTBASEPATH}-hostraw.ll \
        --devicellfile ${OUTPUTBASEPATH}-device.ll \
        --hostpatchedfile ${OUTPUTBASEPATH}-hostpatched.ll
)

(
    set -x
    ${CLANG_HOME}/bin/clang++ \
        ${PASSTHRU} \
        ${LLVM_LL_COMPILE_FLAGS} \
        -DUSE_CLEW \
        -O${HOSTSIDE_COMPILE_OPT_LEVEL} \
        ${OPT_G} \
        -c ${OUTPUTBASEPATH}-hostpatched.ll \
        -o ${OUTPUTBASEPATH}${OUTPUTPOSTFIX}
)

if [ ! "$COMPILE" ]; then {
    (
        set -x
        ${NATIVE_COMPILER} \
            -Wl,-rpath,${COCL_LIB} \
            -Wl,-rpath,$$ORIGIN \
            ${OPT_G} \
            -o ${OUTPUTBASEPATH}${FINALPOSTFIX} ${OUTPUTBASEPATH}${OUTPUTPOSTFIX} \
            -L${COCL_LIB} -lcocl -lclblast -leasycl -lclew -lpthread \
            ${LLVM_LINK_FLAGS}
    )
} fi
